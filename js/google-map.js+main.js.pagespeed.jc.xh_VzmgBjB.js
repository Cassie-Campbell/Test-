var mod_pagespeed_Ypfcmt9TGz = "\nvar google;\n\nfunction init() {\n    // Basic options for a simple Google Map\n    // For more options see: https://developers.google.com/maps/documentation/javascript/reference#MapOptions\n    // var myLatlng = new google.maps.LatLng(40.71751, -73.990922);\n    var myLatlng = new google.maps.LatLng(40.69847032728747, -73.9514422416687);\n    // 39.399872\n    // -8.224454\n    \n    var mapOptions = {\n        // How zoomed in you want the map to start at (always required)\n        zoom: 7,\n\n        // The latitude and longitude to center the map (always required)\n        center: myLatlng,\n\n        // How you would like to style the map. \n        scrollwheel: false,\n        styles: [\n            {\n                \"featureType\": \"administrative.country\",\n                \"elementType\": \"geometry\",\n                \"stylers\": [\n                    {\n                        \"visibility\": \"simplified\"\n                    },\n                    {\n                        \"hue\": \"#ff0000\"\n                    }\n                ]\n            }\n        ]\n    };\n\n    \n\n    // Get the HTML DOM element that will contain your map \n    // We are using a div with id=\"map\" seen below in the <body>\n    var mapElement = document.getElementById('map');\n\n    // Create the Google Map using out element and options defined above\n    var map = new google.maps.Map(mapElement, mapOptions);\n    \n    var addresses = ['New York'];\n\n    for (var x = 0; x < addresses.length; x++) {\n        $.getJSON('http://maps.googleapis.com/maps/api/geocode/json?address='+addresses[x]+'&sensor=false', null, function (data) {\n            var p = data.results[0].geometry.location\n            var latlng = new google.maps.LatLng(p.lat, p.lng);\n            new google.maps.Marker({\n                position: latlng,\n                map: map,\n                icon: 'images/loc.png'\n            });\n\n        });\n    }\n    \n}\ngoogle.maps.event.addDomListener(window, 'load', init);";
var mod_pagespeed_g9FXYGgy1g = "(function() {\n\n	\"use strict\";\n\n	AOS.init({\n		ease: 'slide',\n		once: true\n	});\n\n	var slider = function(){\n		\n		var carouselSlider = document.querySelectorAll('.carousel-testimony');\n		if ( carouselSlider.length > 0 ) {\n\n			var testimonySlider = tns({\n				container: '.carousel-testimony',\n				items: 1,\n				mode: 'carousel',\n				autoplay: true,\n			  animateIn: 'tns-fadeIn',\n		    animateOut: 'tns-fadeOut',\n				speed: 700,\n				nav: true,\n				gutter: 20,\n				controls: false,\n				autoplayButtonOutput: false,\n				responsive:{\n					0:{\n						items: 1,\n						gutter: 0\n					},\n					600:{\n						items: 2,\n						gutter: 20\n					},\n					1000:{\n						items: 3,\n						gutter: 20\n					}\n				}\n			});\n\n		}\n\n	}\n	slider();\n	\n	//COUNTER\n	'use trict';\n		// How long you want the animation to take, in ms\n		const animationDuration = 2000;\n		// Calculate how long each ‘frame’ should last if we want to update the animation 60 times per second\n		const frameDuration = 1000 / 60;\n		// Use that to calculate how many frames we need to complete the animation\n		const totalFrames = Math.round( animationDuration / frameDuration );\n		// An ease-out function that slows the count as it progresses\n		const easeOutQuad = t => t * ( 2 - t );\n\n\n		const numberWithCommas = n => {\n			return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n		}\n\n		// The animation function, which takes an Element\n		const animateCountUp = el => {\n			let frame = 0;\n			const countTo = parseInt( el.innerHTML, 10 );\n			// Start the animation running 60 times per second\n			const counter = setInterval( () => {\n			frame++;\n			// Calculate our progress as a value between 0 and 1\n			// Pass that value to our easing function to get our\n			// progress on a curve\n			const progress = easeOutQuad( frame / totalFrames );\n			// Use the progress value to calculate the current count\n			const currentCount = Math.round( countTo * progress );\n\n			// If the current count has changed, update the element\n			if ( parseInt( el.innerHTML, 10 ) !== currentCount ) {\n			el.innerHTML = numberWithCommas(currentCount);\n		}\n\n		// If we’ve reached our last frame, stop the animation\n		if ( frame === totalFrames ) {\n			clearInterval( counter );\n		}\n		}, frameDuration );\n		};\n\n		// Run the animation on all elements with a class of ‘countup’\n		const runAnimations = () => {\n			const countupEls = document.querySelectorAll( '.countup' );\n			countupEls.forEach( animateCountUp );\n		};\n\n\n\n\n		// In Viewed\n		var elements;\n		var windowHeight;\n\n		function init() {\n			elements = document.querySelectorAll('.section-counter');\n			windowHeight = window.innerHeight;\n		}\n\n		function checkPosition() {\n			var i;\n			for (i = 0; i < elements.length; i++) {\n				var element = elements[i];\n				var positionFromTop = elements[i].getBoundingClientRect().top;\n			if (positionFromTop - windowHeight <= 0) {\n			if( !element.classList.contains('viewed') ) {\n			element.classList.add('viewed');\n			runAnimations();\n			} else {\n			if ( element.classList.contains('viewed') ) {\n\n			}\n		}\n\n		}\n		}\n		}\n\n		window.addEventListener('scroll', checkPosition);\n		window.addEventListener('resize', init);\n\n		init();\n		checkPosition();\n\n\n	//GLIGHTBOX\n	const lightbox = GLightbox({\n	  touchNavigation: true,\n	  loop: true,\n	  autoplayVideos: true\n	});\n\n	//MENU SCROLLING FIXED TOP\n	window.onscroll = function() {scrollFunction()};\n\n	function scrollFunction() {\n	  if (document.body.scrollTop > 100 || document.documentElement.scrollTop > 100) {\n	    // document.getElementById(\"navbar\").style.background = \"black\";\n\n	    var element = document.getElementById(\"navbar\");\n   		element.classList.add(\"scroll\");\n	  } else {\n	  	var element = document.getElementById(\"navbar\");\n   		element.classList.remove(\"scroll\");\n	    // document.getElementById(\"navbar\").style.background = \"transparent\";\n	  }\n	}\n\n\n	//TARGETED LINK\n	window.slide = new SlideNav({\n		activeClass: \"activeme\",\n		toggleButtonSelector: false,\n		toggleBoxSelector: false,\n		hideAfterSelect: true,\n		speed: 70,\n		changeHash: false,\n		navBoxToggleClass: false\n  });\n\n\n\n})()\n\n";
